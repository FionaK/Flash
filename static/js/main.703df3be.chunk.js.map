{"version":3,"sources":["history.js","components/cover/CoverModal.js","components/cover/Home.js","components/Navbar.js","components/Footer.js","components/HoverButtons.js","actions/types.js","apis/train.js","apis/infer.js","actions/utils.js","actions/index.js","utils/index.js","components/train/TrainingConfigForm.js","components/train/imageClassification/ClassificationClassListForm.js","components/train/imageClassification/ClassificationClassList.js","components/train/imageClassification/ClassificationClassChoiceForm.js","components/train/imageClassification/ClassificationDataUploadForm.js","components/train/imageClassification/ClassificationDataPreview.js","components/train/imageClassification/ClassificationDataset.js","components/train/imageClassification/ClassificationModal.js","components/train/imageClassification/ClassificationCreate.js","components/train/TrainingSubmitModal.js","components/train/imageClassification/Classification.js","components/FormFileField.js","components/train/textClassification/SADataUploadForm.js","components/train/textClassification/SAModal.js","components/train/textClassification/SACreate.js","components/train/textClassification/SentimentAnalysis.js","components/train/Training.js","components/infer/TokenForm.js","components/infer/InferenceForm.js","components/infer/TaskDisplay.js","components/infer/Inference.js","components/App.js","reducers/loadingFormReducer.js","reducers/formFileFieldReducer.js","reducers/classificationReducer.js","reducers/sentimentAnalysisReducer.js","reducers/serverConfigReducer.js","reducers/inferenceReducer.js","reducers/index.js","index.js"],"names":["createBrowserHistory","basename","process","CoverModal","props","modalCardContent","title","targetUrl","contentImage","contentText","buttonText","className","src","style","height","alt","to","_","map","this","item","renderCardContent","ReactDOM","createPortal","onClick","onDismiss","e","stopPropagation","renderContent","document","querySelector","React","Component","Home","state","displayModal","toggleModal","setState","renderModal","Navbar","toggleNavbar","collapsed","activeNavItem","history","location","pathname","substring","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","withRouter","Footer","rel","href","target","HoverButtons","buttonData","buttonValue","Object","isSmall","currentButtonValue","event","preventDefault","changeCurrentButtonValue","undefined","hoverButtons","renderButton","LOADING_FORM","CLEAR_LOADING_FORM","SET_FORM_FILE_FIELD_LABEL","CLEAR_FORM_FILE_FIELD_LABEL","TRAIN_TOKEN_SET","TRAIN_TOKEN_CLEAR","CLASSIFY_CONFIG","CLASSIFY_MODEL_TYPE","CLASSIFY_DATA_SPLIT","CLASSIFY_ADD_CLASS","CLASSIFY_DELETE_CLASS","CLASSIFY_CURRENT_CLASS","CLASSIFY_ADD_IMAGES","CLASSIFY_DATA_CLEAR","CLASSIFY_CLEAR","SA_CONFIG","SA_RNN_TYPE","SA_DATA_SPLIT","SA_DATA_ADD","SA_DATA_CLEAR","SA_CLEAR","INFERENCE_CONFIG_SET","INFERENCE_CONFIG_CLEAR","INFERENCE_SUBMIT","INFERENCE_PREDICTION_CLEAR","INFERENCE_CLEAR","axios","create","baseURL","headers","post","networkTransaction","a","url","formData","requestType","maxNumTries","apiType","response","numTries","api","inferApi","trainApi","get","console","log","statusCheck","data","status","toastError","message","toast","dark","size","color","checkResponse","result","loadingForm","formName","payload","clearLoadingForm","clearFormFileFieldLabel","clearTrainToken","setTrainConfig","taskName","config","clearTrainData","dispatch","clearTrainConfig","submitTrainRequest","trainConfig","FormData","append","JSON","stringify","token","reset","renderLoadingPage","loadingText","role","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","removeFileBase64Header","image","replace","setErrorClass","touched","renderError","renderTextInput","input","label","placeholder","textAppend","enableAppendSumbit","readOnly","meta","autoComplete","renderFormField","contentType","options","acceptFileFormat","multiple","isFixed","formGroupClassName","renderTextInputGroup","default","value","key","renderDropdownInputGroup","isMultiple","omit","accept","renderFileInputGroup","htmlFor","renderSwitchInputGroup","renderSubmitButton","loading","originalText","btnColor","ref","disabled","aria-hidden","TrainingConfigForm","reduceLrOnPlateau","toggleReduceLr","changeModelType","modelType","setTrainModelType","changeDataSplit","dataSplit","setTrainDataSplit","configOptions","batchSizeLimit","batchSizeMin","min","batchSizeMax","max","numEpochsLimit","numEpochsMin","numEpochsMax","onSubmit","handleSubmit","Field","name","component","modelFieldTitle","modelTypes","currentConfig","onChange","optimizers","connect","ownProps","initialValues","reduxForm","validate","formValues","errors","test","reduceLrOnPlateauLimit","factorLimit","factor","patienceLimit","patience","minLrLimit","minLr","reduceLrOnPlateauPatience","reduceLrOnPlateauFactor","reduceLrOnPlateauMinLr","learningRateLimit","learningRateMin","learningRateMax","learningRate","batchSize","epochs","ClassificationClassListForm","classValue","isSaved","toggleSaveMode","classList","includes","classifyDeleteClass","classifyAddClass","initialData","isOptionalField","pattern","required","dataset","classification","keys","classNameValue","ClassificationClassList","range","numClassesLimit","number","length","form","renderClassList","ClassificationClassChoiceForm","zipObject","enableReinitialize","values","submit","ClassificationDataUploadForm","currentClass","numImagesExceeded","sizeExceeded","datasetSize","numImagesLimitMax","numImagesLimit","sizeLimit","ClassificationDataPreview","imgUrl","imgId","width","imgList","renderCard","datasetPreview","ClassificationDataset","onClassChoiceSubmit","classifyCurrentClass","fileListToArray","fileList","imagesList","Array","from","currentClassImgCount","slice","getImageListSize","imagesListSize","sumBy","partial","imageListToBase64","imagesListPreview","i","push","removeBase64HeaderFromImageList","onDataUploadSubmit","currentSize","info","classifyAddImages","classChoice","ClassificationModal","maxHeight","ClassificationCreate","onModalDismiss","clear","checkNumClasses","numClassesLimitMin","checkNumImages","numImagesLimitMin","datasetValues","datasetFailedClasses","sum","items","onConfigSubmit","mode","taskType","isEmpty","bindActionCreators","TrainingSubmitModal","serverConfig","Classification","optimizer","currentTrainConfig","trainConfigOptions","FormFileField","fieldConfig","fieldLabel","hideFilename","setFormFileFieldLabel","files","formFileField","SADataUploadForm","SAModal","csvData","saCsvData","saAddData","numRows","sentimentAnalysis","SACreate","checkDataset","SentimentAnalysis","Training","changeCurrentTask","currentTask","adam","sgd","renderCurrentTask","TokenForm","clearInferenceConfig","submitInferenceToken","enableAppendSubmit","inference","accuracy","accuracyPlot","InferenceForm","inferenceInput","clearInferencePrediction","inputType","submitInferenceData","formInput","field","prediction","TaskDisplay","fieldValues","toFixed","renderAccuracy","renderOutput","Inference","clearInference","App","position","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","path","exact","loadingFormReducer","action","filter","element","INITIAL_STATE","formFileFieldReducer","classificationReducer","sentimentAnalysisReducer","serverConfigReducer","inferenceReducer","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","render"],"mappings":"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","file":"static/js/main.703df3be.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n","import _ from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from 'react-router-dom';\n\nimport '../../styles/Modal.css';\n\nclass CoverModal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.modalCardContent = [\n      {\n        title: 'Training',\n        targetUrl: '/training',\n        contentImage: `${process.env.PUBLIC_URL}/assets/training.gif`,\n        contentText: (\n          <>\n            Train an{' '}\n            <mark>\n              <b>Image Classification</b>\n            </mark>{' '}\n            or{' '}\n            <mark>\n              <b>Sentiment Analysis</b>\n            </mark>{' '}\n            model on your custom dataset.\n          </>\n        ),\n        buttonText: 'Choose Task',\n      },\n      {\n        title: 'Inference',\n        targetUrl: '/inference',\n        contentImage: `${process.env.PUBLIC_URL}/assets/inference.gif`,\n        contentText:\n          'Already trained a model on Flash? Choose this to test your model.',\n        buttonText: 'Test Model',\n      },\n    ];\n  }\n\n  renderCardContent({\n    title,\n    targetUrl,\n    contentImage,\n    contentText,\n    buttonText,\n  }) {\n    return (\n      <div className=\"card card-hover\" key={targetUrl}>\n        <img\n          src={contentImage}\n          className=\"card-img-top\"\n          style={{ height: '24vh' }}\n          alt=\"source\"\n        />\n        <div className=\"card-body\">\n          <h4 className=\"card-title text-center\">{title}</h4>\n          <p className=\"card-text my-4\">{contentText}</p>\n          <div className=\"text-center\">\n            <Link to={targetUrl}>\n              <button className=\"btn btn-info\">{buttonText}</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderContent() {\n    return (\n      <div className=\"card-deck px-0 px-md-5\">\n        {_.map(this.modalCardContent, item => {\n          return this.renderCardContent(item);\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={this.props.onDismiss}>\n        <div className=\"modal-body\" onClick={e => e.stopPropagation()}>\n          <h3 className=\"text-center\">Get Started</h3>\n          <hr className=\"w-100 mb-4\" />\n          {this.renderContent()}\n          <hr className=\"w-100 mt-4\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-warning mr-2\"\n                onClick={this.props.onDismiss}\n              >\n                Go Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nexport default CoverModal;\n","import React from 'react';\n\nimport CoverModal from './CoverModal';\n\nclass Home extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <CoverModal onDismiss={this.toggleModal} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Home Page</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col text-center\">\n            <button\n              className=\"btn border border-secondary mt-2\"\n              onClick={() => this.toggleModal()}\n            >\n              Get Started\n            </button>\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: true,\n    };\n  }\n\n  toggleNavbar = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    const activeNavItem = this.props.history.location.pathname.substring(1);\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n          <Link to=\"/\" className=\"navbar-brand\">\n            <img\n              src={`${process.env.PUBLIC_URL}/flash.svg`}\n              style={{ height: '2rem' }}\n              className=\"mr-2\"\n              alt=\"logo\"\n            />{' '}\n            Flash\n          </Link>\n          <button\n            className={`navbar-toggler navbar-toggler-right ${\n              this.state.collapsed ? 'collapsed' : ''\n            }`}\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n            onClick={this.toggleNavbar}\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div\n            className={`collapse navbar-collapse ${\n              this.state.collapsed ? '' : 'show'\n            }`}\n            id=\"navbarSupportedContent\"\n            onClick={this.toggleNavbar}\n          >\n            <ul\n              className={`navbar-nav ml-auto ${\n                activeNavItem === 'home' ? 'active' : ''\n              }`}\n            >\n              <li className=\"nav-item\" key=\"home\">\n                <Link className=\"nav-link\" to=\"/\">\n                  Home\n                </Link>\n              </li>\n              <li className=\"nav-item\" key=\"training\">\n                <Link className=\"nav-link\" to=\"/training\">\n                  Training\n                </Link>\n              </li>\n              <li className=\"nav-item\" key=\"inference\">\n                <Link className=\"nav-link\" to=\"/inference\">\n                  Inference\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default withRouter(Navbar);\n","import React from 'react';\n\nimport '../styles/Footer.css';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer mt-5 py-3\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-6 text-left\">\n            <img\n              src={`${process.env.PUBLIC_URL}/flash.svg`}\n              style={{ height: '2rem' }}\n              alt=\"logo\"\n            />\n            <span className=\"text-muted ml-3\">Flash</span>\n          </div>\n          <div className=\"col-6 text-right\">\n            <span className=\"text-muted mr-3\">\n              <a\n                className=\"anchor-black\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/shan18/Flash\"\n                target=\"_blank\"\n              >\n                GitHub\n              </a>\n            </span>\n            <img\n              src={`${process.env.PUBLIC_URL}/github_logo.png`}\n              style={{ height: '1.5rem' }}\n              alt=\"github\"\n            />\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import _ from 'lodash';\nimport React from 'react';\n\nclass HoverButtons extends React.Component {\n  renderButton(buttonData) {\n    let buttonValue = '';\n    let buttonText = '';\n\n    if (buttonData instanceof Object) {\n      buttonValue = buttonData.buttonValue;\n      buttonText = buttonData.buttonText;\n    } else {\n      buttonValue = buttonData;\n      buttonText = buttonData;\n    }\n\n    return (\n      <button\n        className={`btn border border-secondary mx-2 my-2 btn-hover ${\n          this.props.isSmall ? 'btn-sm' : ''\n        } ${\n          this.props.currentButtonValue === buttonValue ? 'btn-primary' : ''\n        }`}\n        onClick={event => {\n          event.preventDefault();\n          this.props.changeCurrentButtonValue(buttonValue);\n        }}\n        key={buttonValue}\n      >\n        {buttonText === undefined ? buttonValue : buttonText}\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {_.map(this.props.hoverButtons, buttonData =>\n          this.renderButton(buttonData)\n        )}\n      </>\n    );\n  }\n}\n\nexport default HoverButtons;\n","export const LOADING_FORM = 'LOADING_FORM';\nexport const CLEAR_LOADING_FORM = 'CLEAR_LOADING_FORM';\nexport const SET_FORM_FILE_FIELD_LABEL = 'SET_FORM_FILE_FIELD_LABEL';\nexport const CLEAR_FORM_FILE_FIELD_LABEL = 'CLEAR_FORM_FILE_FIELD_LABEL';\nexport const TRAIN_TOKEN_SET = 'TRAIN_TOKEN_SET';\nexport const TRAIN_TOKEN_CLEAR = 'TRAIN_TOKEN_CLEAR';\nexport const CLASSIFY_CONFIG = 'CLASSIFY_CONFIG';\nexport const CLASSIFY_MODEL_TYPE = 'CLASSIFY_MODEL_TYPE';\nexport const CLASSIFY_DATA_SPLIT = 'CLASSIFY_DATA_SPLIT';\nexport const CLASSIFY_ADD_CLASS = 'CLASSIFY_ADD_CLASS';\nexport const CLASSIFY_DELETE_CLASS = 'CLASSIFY_DELETE_CLASS';\nexport const CLASSIFY_CURRENT_CLASS = 'CLASSIFY_CURRENT_CLASS';\nexport const CLASSIFY_ADD_IMAGES = 'CLASSIFY_ADD_IMAGES';\nexport const CLASSIFY_DATA_CLEAR = 'CLASSIFY_DATA_CLEAR';\nexport const CLASSIFY_CLEAR = 'CLASSIFY_CLEAR';\nexport const SA_CONFIG = 'SA_CONFIG';\nexport const SA_RNN_TYPE = 'SA_RNN_TYPE';\nexport const SA_DATA_SPLIT = 'SA_DATA_SPLIT';\nexport const SA_DATA_ADD = 'SA_DATA_ADD';\nexport const SA_DATA_CLEAR = 'SA_DATA_CLEAR';\nexport const SA_CLEAR = 'SA_CLEAR';\nexport const INFERENCE_CONFIG_SET = 'INFERENCE_CONFIG_SET';\nexport const INFERENCE_CONFIG_CLEAR = 'INFERENCE_CONFIG_CLEAR';\nexport const INFERENCE_SUBMIT = 'INFERENCE_SUBMIT';\nexport const INFERENCE_PREDICTION_CLEAR = 'INFERENCE_PREDICTION_CLEAR';\nexport const INFERENCE_CLEAR = 'INFERENCE_CLEAR';\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://1tyzrad9g7.execute-api.us-east-1.amazonaws.com/dev',\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://6yjieipsd1.execute-api.us-east-1.amazonaws.com/dev',\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport trainApi from '../apis/train';\nimport inferApi from '../apis/infer';\n\nexport const networkTransaction = async ({\n  url,\n  formData,\n  requestType,\n  maxNumTries,\n  apiType,\n}) => {\n  let response = null;\n  let numTries = 0;\n\n  let api = inferApi;\n  if (apiType === 'train') {\n    api = trainApi;\n  }\n\n  if (!maxNumTries) {\n    maxNumTries = 1;\n  }\n\n  while (numTries >= 0 && numTries < maxNumTries) {\n    try {\n      if (requestType === 'post') {\n        response = await api.post(url, formData);\n      } else {\n        response = await api.get(url);\n      }\n      numTries = -1;\n    } catch (error) {\n      console.log(error);\n      numTries++;\n    }\n  }\n  return response;\n};\n\nexport const statusCheck = async () => {\n  const response = await networkTransaction({\n    url: '/status',\n    requestType: 'get',\n    apiType: 'train',\n  });\n  return response.data.status !== 'active';\n};\n\nexport const toastError = message => {\n  toast.dark(\n    <div>\n      <MdError size={25} color=\"yellow\" />\n      &nbsp; {message}\n    </div>\n  );\n};\n\nexport const checkResponse = response => {\n  if (response && response.data) {\n    if (response.data.result === 'success') {\n      return true;\n    } else if (response.data.result === 'error') {\n      toastError(response.data.message);\n    } else {\n      toastError('500: Internal Server Error!');\n    }\n  } else {\n    toastError('500: Internal Server Error!');\n  }\n  return false;\n};\n","import { reset } from 'redux-form';\n\nimport {\n  LOADING_FORM,\n  CLEAR_LOADING_FORM,\n  SET_FORM_FILE_FIELD_LABEL,\n  CLEAR_FORM_FILE_FIELD_LABEL,\n  TRAIN_TOKEN_SET,\n  TRAIN_TOKEN_CLEAR,\n  CLASSIFY_CONFIG,\n  CLASSIFY_MODEL_TYPE,\n  CLASSIFY_DATA_SPLIT,\n  CLASSIFY_ADD_CLASS,\n  CLASSIFY_DELETE_CLASS,\n  CLASSIFY_CURRENT_CLASS,\n  CLASSIFY_ADD_IMAGES,\n  CLASSIFY_DATA_CLEAR,\n  CLASSIFY_CLEAR,\n  SA_CONFIG,\n  SA_RNN_TYPE,\n  SA_DATA_SPLIT,\n  SA_DATA_ADD,\n  SA_DATA_CLEAR,\n  SA_CLEAR,\n  INFERENCE_CONFIG_SET,\n  INFERENCE_CONFIG_CLEAR,\n  INFERENCE_SUBMIT,\n  INFERENCE_PREDICTION_CLEAR,\n  INFERENCE_CLEAR,\n} from './types';\nimport {\n  networkTransaction,\n  statusCheck,\n  toastError,\n  checkResponse,\n} from './utils';\n\nexport const loadingForm = formName => {\n  return {\n    type: LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const clearLoadingForm = formName => {\n  return {\n    type: CLEAR_LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const setFormFileFieldLabel = ({ taskName, label }) => {\n  return {\n    type: SET_FORM_FILE_FIELD_LABEL,\n    payload: { taskName, label },\n  };\n};\n\nexport const clearFormFileFieldLabel = formName => {\n  return {\n    type: CLEAR_FORM_FILE_FIELD_LABEL,\n    payload: formName,\n  };\n};\n\nexport const clearTrainToken = () => {\n  return {\n    type: TRAIN_TOKEN_CLEAR,\n  };\n};\n\nexport const setTrainConfig = ({ taskName, config }) => {\n  const actionType =\n    taskName === 'classification' ? CLASSIFY_CONFIG : SA_CONFIG;\n  return {\n    type: actionType,\n    payload: config,\n  };\n};\n\nexport const setTrainDataSplit = ({ taskName, dataSplit }) => {\n  const actionType =\n    taskName === 'classification' ? CLASSIFY_DATA_SPLIT : SA_DATA_SPLIT;\n  return {\n    type: actionType,\n    payload: dataSplit,\n  };\n};\n\nexport const setTrainModelType = ({ taskName, modelType }) => {\n  const actionType =\n    taskName === 'classification' ? CLASSIFY_MODEL_TYPE : SA_RNN_TYPE;\n  return {\n    type: actionType,\n    payload: modelType,\n  };\n};\n\nexport const clearTrainData = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({\n    type: taskName === 'classification' ? CLASSIFY_DATA_CLEAR : SA_DATA_CLEAR,\n  });\n};\n\nexport const clearTrainConfig = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({ type: taskName === 'classification' ? CLASSIFY_CLEAR : SA_CLEAR });\n};\n\nexport const submitTrainRequest = ({\n  formName,\n  trainConfig,\n}) => async dispatch => {\n  if (formName) {\n    dispatch(loadingForm(formName));\n  }\n\n  // Check server status\n  const serverIsAvailable = await statusCheck();\n\n  if (serverIsAvailable) {\n    // Encode data\n    const formData = new FormData();\n    formData.append('training_data', JSON.stringify(trainConfig));\n\n    // Processing the last url in list to display in webpage\n    const response = await networkTransaction({\n      url: '/train',\n      formData,\n      requestType: 'post',\n      apiType: 'train',\n    });\n\n    if (checkResponse(response)) {\n      dispatch({ type: TRAIN_TOKEN_SET, payload: response.data.token });\n      dispatch(reset(formName));\n    }\n  } else {\n    toastError(\n      'Server is currently training another model! Please try again after a few minutes.'\n    );\n  }\n\n  if (formName) {\n    dispatch(clearLoadingForm(formName));\n  }\n};\n\nexport const classifyAddClass = classNameValue => {\n  return {\n    type: CLASSIFY_ADD_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const classifyDeleteClass = classNameValue => {\n  return {\n    type: CLASSIFY_DELETE_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const classifyCurrentClass = classNameValue => {\n  return {\n    type: CLASSIFY_CURRENT_CLASS,\n    payload: classNameValue,\n  };\n};\n\nexport const classifyAddImages = ({\n  imagesList,\n  imagesListSize,\n  imagesListPreview,\n}) => {\n  return {\n    type: CLASSIFY_ADD_IMAGES,\n    payload: { imagesList, imagesListSize, imagesListPreview },\n  };\n};\n\nexport const saAddData = csvData => {\n  return {\n    type: SA_DATA_ADD,\n    payload: csvData,\n  };\n};\n\nexport const clearInferenceConfig = () => {\n  return {\n    type: INFERENCE_CONFIG_CLEAR,\n  };\n};\n\nexport const clearInferencePrediction = () => {\n  return { type: INFERENCE_PREDICTION_CLEAR };\n};\n\nexport const clearInference = taskName => dispatch => {\n  dispatch(clearFormFileFieldLabel(taskName));\n  dispatch({ type: INFERENCE_CLEAR });\n};\n\nexport const submitInferenceToken = ({ formName, token }) => async dispatch => {\n  if (formName) {\n    dispatch(loadingForm(formName));\n  }\n\n  // Encode data\n  const formData = new FormData();\n  formData.append('token', JSON.stringify({ token }));\n\n  const response = await networkTransaction({\n    url: '/check',\n    formData,\n    requestType: 'post',\n    apiType: 'inference',\n  });\n\n  if (checkResponse(response)) {\n    dispatch({\n      type: INFERENCE_CONFIG_SET,\n      payload: {\n        token,\n        taskType: response.data.taskType,\n        accuracy: response.data.accuracy,\n        accuracyPlot: response.data.accuracyPlot,\n      },\n    });\n  }\n\n  if (formName) {\n    dispatch(clearLoadingForm(formName));\n  }\n};\n\nexport const submitInferenceData = ({\n  formName,\n  formInput,\n}) => async dispatch => {\n  if (formName) {\n    dispatch(loadingForm(formName));\n  }\n\n  // Encode data\n  const formData = new FormData();\n  formData.append('inferenceInput', JSON.stringify(formInput));\n\n  const response = await networkTransaction({\n    url: '/inference',\n    formData,\n    requestType: 'post',\n    apiType: 'inference',\n    maxNumTries: 3,\n  });\n\n  if (checkResponse(response)) {\n    dispatch({\n      type: INFERENCE_SUBMIT,\n      payload: response.data.prediction,\n    });\n  }\n\n  if (formName) {\n    dispatch(clearLoadingForm(formName));\n  }\n};\n","import _ from 'lodash';\nimport React from 'react';\n\nexport const renderLoadingPage = loadingText => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 text-center\">\n        <h4 className=\"heading\">{loadingText}</h4>\n      </div>\n      <div className=\"col-12 text-center\">\n        <div className=\"spinner-grow spinner-grow-md\" role=\"status\" />\n      </div>\n    </div>\n  );\n};\n\nexport const convertFileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n};\n\nexport const removeFileBase64Header = image => {\n  return image.replace('data:', '').replace(/^.+,/, '');\n};\n\n/* Form utility functions */\n\nconst setErrorClass = ({ touched, error }) => {\n  return `${touched && error ? 'is-invalid' : ''}`;\n};\n\nexport const renderError = ({ error, touched }) => {\n  if (touched && error) {\n    return <div className=\"invalid-feedback\">{error}</div>;\n  }\n};\n\nexport const renderTextInput = ({\n  input,\n  label,\n  type,\n  placeholder,\n  textAppend,\n  enableAppendSumbit,\n  readOnly,\n  meta,\n}) => {\n  return (\n    <>\n      {label ? <label>{label}</label> : ''}\n      <div className={`input-group ${setErrorClass(meta)}`}>\n        <input\n          {...input}\n          type={type}\n          className=\"form-control\"\n          placeholder={placeholder}\n          autoComplete=\"off\"\n          readOnly={readOnly}\n        />\n        {textAppend ? (\n          <div className=\"input-group-append\">\n            {enableAppendSumbit ? (\n              <button className=\"btn btn-danger\">{textAppend}</button>\n            ) : (\n              <button\n                className=\"btn btn-danger\"\n                onClick={event => event.preventDefault}\n              >\n                {textAppend}\n              </button>\n            )}\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n      {renderError(meta)}\n    </>\n  );\n};\n\nexport const renderTextInputGroup = ({\n  input,\n  label,\n  type,\n  placeholder,\n  textAppend,\n  enableAppendSumbit,\n  readOnly,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      {renderTextInput({\n        input,\n        label,\n        type,\n        placeholder,\n        textAppend,\n        enableAppendSumbit,\n        readOnly,\n        meta,\n      })}\n    </div>\n  );\n};\n\nexport const renderDropdownInputGroup = ({\n  input,\n  label,\n  options,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      {label ? <label>{label}</label> : ''}\n      <div className={`input-group ${setErrorClass(meta)}`}>\n        <select {...input} className=\"form-control custom-select\">\n          {options.default ? <option value=\"\">{options.default}</option> : ''}\n          {_.map(options, (value, key) => {\n            if (key !== 'default') {\n              return (\n                <option key={key} value={key}>\n                  {value}\n                </option>\n              );\n            }\n            return '';\n          })}\n        </select>\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderFileInputGroup = ({\n  input,\n  label,\n  acceptFileFormat,\n  multiple,\n  formGroupClassName,\n  meta,\n}) => {\n  let isMultiple = multiple ? multiple : false;\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      <div className={`custom-file ${setErrorClass(meta)}`}>\n        <label className=\"custom-file-label text-left\">{label}</label>\n        <input\n          {..._.omit(input, 'value')}\n          type=\"file\"\n          className=\"custom-file-input\"\n          multiple={isMultiple}\n          accept={acceptFileFormat}\n        />\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderSwitchInputGroup = ({\n  input,\n  label,\n  formGroupClassName,\n  meta,\n}) => {\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      <div className={`custom-control custom-switch ${setErrorClass(meta)}`}>\n        <input\n          {...input}\n          type=\"checkbox\"\n          className=\"custom-control-input\"\n          id=\"custom-switch-input\"\n        />\n        <label className=\"custom-control-label\" htmlFor=\"custom-switch-input\">\n          {label}\n        </label>\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderFormField = ({\n  input,\n  contentType,\n  type,\n  placeholder,\n  label,\n  options,\n  acceptFileFormat,\n  multiple,\n  textAppend,\n  enableAppendSumbit,\n  isFixed: readOnly,\n  formGroupClassName,\n  meta,\n}) => {\n  if (contentType === 'text') {\n    return renderTextInputGroup({\n      input,\n      label,\n      type,\n      placeholder,\n      textAppend,\n      enableAppendSumbit,\n      readOnly,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'dropdown') {\n    return renderDropdownInputGroup({\n      input,\n      label,\n      options,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'file') {\n    return renderFileInputGroup({\n      input,\n      label,\n      acceptFileFormat,\n      multiple,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'switch') {\n    return renderSwitchInputGroup({\n      input,\n      label,\n      formGroupClassName,\n      meta,\n    });\n  }\n  return '';\n};\n\nexport const renderSubmitButton = ({\n  loading,\n  originalText,\n  loadingText,\n  onClick,\n  btnColor,\n  type,\n  ref,\n}) => {\n  if (!type) {\n    type = 'submit';\n  }\n  if (!btnColor) {\n    btnColor = 'primary';\n  }\n  if (loading) {\n    return (\n      <button className={`btn btn-${btnColor}`} type={type} ref={ref} disabled>\n        <span\n          className=\"spinner-border spinner-border-sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        ></span>\n        &nbsp;&nbsp;{loadingText}\n      </button>\n    );\n  } else {\n    return (\n      <button\n        className={`btn btn-${btnColor}`}\n        type={type}\n        ref={ref}\n        onClick={onClick}\n      >\n        {originalText}\n      </button>\n    );\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { setTrainModelType, setTrainDataSplit } from '../../actions';\nimport { renderFormField } from '../../utils';\nimport HoverButtons from '../HoverButtons';\n\nclass TrainingConfigForm extends React.Component {\n  state = {\n    reduceLrOnPlateau: false,\n  };\n\n  toggleReduceLr = () => {\n    this.setState({ reduceLrOnPlateau: !this.state.reduceLrOnPlateau });\n  };\n\n  changeModelType = modelType => {\n    this.props.setTrainModelType({ taskName: this.props.taskName, modelType });\n  };\n\n  changeDataSplit = dataSplit => {\n    this.props.setTrainDataSplit({ taskName: this.props.taskName, dataSplit });\n  };\n\n  render() {\n    const {\n      batchSizeLimit: { min: batchSizeMin, max: batchSizeMax },\n      numEpochsLimit: { min: numEpochsMin, max: numEpochsMax },\n    } = this.props.configOptions;\n    return (\n      <form onSubmit={this.props.handleSubmit}>\n        <div className=\"row\">\n          <div className=\"col mx-auto\">\n            <Field\n              name=\"taskName\"\n              component={renderFormField}\n              contentType=\"text\"\n              placeholder=\"Enter Task Name\"\n              formGroupClassName=\"text-center\"\n              label={<h4>Task Name</h4>}\n            />\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-md-6 mr-auto text-center\">\n            <h4 className=\"mb-2\">{this.props.configOptions.modelFieldTitle}</h4>\n            <HoverButtons\n              hoverButtons={this.props.configOptions.modelTypes}\n              currentButtonValue={this.props.currentConfig.modelType}\n              changeCurrentButtonValue={this.changeModelType}\n              isSmall\n            />\n          </div>\n          <div className=\"col-12 col-md-4 ml-auto mt-5 mt-md-0 text-center\">\n            <h4 className=\"mb-2\">Dataset Split</h4>\n            <HoverButtons\n              hoverButtons={this.props.configOptions.dataSplit}\n              currentButtonValue={this.props.currentConfig.dataSplit}\n              changeCurrentButtonValue={this.changeDataSplit}\n              isSmall\n            />\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-md-6 mx-auto text-center\">\n            <h4 className=\"mb-2\">Callbacks</h4>\n            <Field\n              name=\"reduceLrOnPlateau\"\n              component={renderFormField}\n              contentType=\"switch\"\n              label=\"Reduce LR on Plateau\"\n              onChange={() => this.toggleReduceLr()}\n            />\n          </div>\n        </div>\n        {this.state.reduceLrOnPlateau ? (\n          <div className=\"form-group row mt-1 mb-5\">\n            <div className=\"col-12 col-md-4 text-center\">\n              <Field\n                name=\"reduceLrOnPlateauPatience\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Patience\"\n                placeholder=\"Enter Patience\"\n              />\n            </div>\n            <div className=\"col-12 col-md-4 my-3 my-md-0 text-center\">\n              <Field\n                name=\"reduceLrOnPlateauFactor\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Factor\"\n                placeholder=\"Enter Factor\"\n              />\n            </div>\n            <div className=\"col-12 col-md-4 text-center\">\n              <Field\n                name=\"reduceLrOnPlateauMinLr\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Minimum LR\"\n                placeholder=\"Enter Min LR\"\n              />\n            </div>\n          </div>\n        ) : (\n          ''\n        )}\n        <div className=\"form-group row my-5\">\n          <div className=\"col-12 col-md-6 text-center\">\n            <Field\n              name=\"optimizer\"\n              component={renderFormField}\n              contentType=\"dropdown\"\n              label=\"Optimizer\"\n              options={this.props.configOptions.optimizers}\n            />\n          </div>\n          <div className=\"col-12 col-md-6 mt-3 mt-md-0 text-center\">\n            <Field\n              name=\"learningRate\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Learning Rate\"\n              placeholder=\"Enter LR\"\n            />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <div className=\"col-12 col-md-6 text-center\">\n            <Field\n              name=\"batchSize\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Batch Size\"\n              placeholder={`Range: ${batchSizeMin} - ${batchSizeMax}`}\n            />\n          </div>\n          <div className=\"col-12 col-md-6 mt-3 mt-md-0 text-center\">\n            <Field\n              name=\"epochs\"\n              component={renderFormField}\n              contentType=\"text\"\n              label=\"Epochs\"\n              placeholder={`Range: ${numEpochsMin} - ${numEpochsMax}`}\n            />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = (formValues, { configOptions }) => {\n  const errors = {};\n\n  // Task Name\n  if (!formValues.taskName) {\n    errors.taskName = 'You must enter a task name';\n  } else if (!/^[a-zA-Z0-9- ]+$/i.test(formValues.taskName)) {\n    errors.taskName =\n      'Task name can contain only alphabets, numbers, hyphens and spaces';\n  }\n\n  // Reduce LR on Plateau\n  if (formValues.reduceLrOnPlateau) {\n    const {\n      reduceLrOnPlateauLimit: {\n        factor: factorLimit,\n        patience: patienceLimit,\n        minLr: minLrLimit,\n      },\n    } = configOptions;\n\n    // Patience\n    if (!formValues.reduceLrOnPlateauPatience) {\n      errors.reduceLrOnPlateauPatience = 'Enter a value';\n    } else if (!/^[0-9]+$/i.test(formValues.reduceLrOnPlateauPatience)) {\n      errors.reduceLrOnPlateauPatience = 'Must be an integer';\n    } else if (\n      formValues.reduceLrOnPlateauPatience < patienceLimit.min ||\n      formValues.reduceLrOnPlateauPatience > patienceLimit.max\n    ) {\n      errors.reduceLrOnPlateauPatience = `Must be between ${patienceLimit.min} and ${patienceLimit.max}`;\n    }\n\n    // Factor\n    if (!formValues.reduceLrOnPlateauFactor) {\n      errors.reduceLrOnPlateauFactor = 'Enter a value';\n    } else if (\n      !/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.reduceLrOnPlateauFactor)\n    ) {\n      errors.reduceLrOnPlateauFactor = 'Enter a valid value';\n    } else if (\n      formValues.reduceLrOnPlateauFactor < factorLimit.min ||\n      formValues.reduceLrOnPlateauFactor > factorLimit.max\n    ) {\n      errors.reduceLrOnPlateauFactor = `Must be between ${factorLimit.min} and ${factorLimit.max}`;\n    }\n\n    // Min LR\n    if (!formValues.reduceLrOnPlateauMinLr) {\n      errors.reduceLrOnPlateauMinLr = 'Enter a value';\n    } else if (\n      !/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.reduceLrOnPlateauMinLr)\n    ) {\n      errors.reduceLrOnPlateauMinLr = 'Enter a valid value';\n    } else if (formValues.reduceLrOnPlateauMinLr < minLrLimit) {\n      errors.reduceLrOnPlateauMinLr = `Minimum value is ${minLrLimit}`;\n    }\n  }\n\n  // Learning Rate\n  const {\n    learningRateLimit: { min: learningRateMin, max: learningRateMax },\n  } = configOptions;\n  if (!formValues.learningRate) {\n    errors.learningRate = 'You must enter a learning rate';\n  } else if (!/^[0-9]+(\\.[0-9]+)*$/i.test(formValues.learningRate)) {\n    errors.learningRate = 'Enter a valid value';\n  } else if (\n    formValues.learningRate < learningRateMin ||\n    formValues.learningRate > learningRateMax\n  ) {\n    errors.learningRate = `Must be between ${learningRateMin} and ${learningRateMax}`;\n  }\n\n  // Batch Size\n  const {\n    batchSizeLimit: { min: batchSizeMin, max: batchSizeMax },\n  } = configOptions;\n  if (!formValues.batchSize) {\n    errors.batchSize = 'You must enter a batch size';\n  } else if (!/^[0-9]+$/i.test(formValues.batchSize)) {\n    errors.batchSize = 'Batch size must be an integer';\n  } else if (\n    formValues.batchSize < batchSizeMin ||\n    formValues.batchSize > batchSizeMax\n  ) {\n    errors.batchSize = `Must be between ${batchSizeMin} and ${batchSizeMax}`;\n  }\n\n  // Epochs\n  const {\n    numEpochsLimit: { min: numEpochsMin, max: numEpochsMax },\n  } = configOptions;\n  if (!formValues.epochs) {\n    errors.epochs = 'You must enter the number of epochs';\n  } else if (!/^[0-9]+$/i.test(formValues.epochs)) {\n    errors.epochs = 'Number of epochs must be an integer';\n  } else if (\n    formValues.epochs < numEpochsMin ||\n    formValues.epochs > numEpochsMax\n  ) {\n    errors.epochs = `Must be between ${numEpochsMin} and ${numEpochsMax}`;\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const { configOptions, currentConfig } = state[ownProps.taskName];\n  return { configOptions, currentConfig, initialValues: currentConfig };\n};\n\nexport default connect(mapStateToProps, {\n  setTrainModelType,\n  setTrainDataSplit,\n})(reduxForm({ validate })(TrainingConfigForm));\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { FaCheck } from 'react-icons/fa';\nimport { MdDelete, MdError } from 'react-icons/md';\n\nimport { classifyAddClass, classifyDeleteClass } from '../../../actions';\n\nclass ClassificationClassListForm extends React.Component {\n  state = {\n    classValue: '',\n    isSaved: false,\n  };\n\n  toggleSaveMode = () => {\n    this.setState({ isSaved: !this.state.isSaved });\n  };\n\n  onSubmit() {\n    const { isSaved } = this.state;\n    if (!isSaved && this.props.classList.includes(this.state.classValue)) {\n      toast.error(\n        <div>\n          <MdError size={25} />\n          &nbsp; A class with name \"{this.state.classValue}\" already exists!\n        </div>\n      );\n    } else {\n      const { classValue } = this.state;\n      if (!isSaved) {\n        this.props.classifyAddClass(classValue);\n      } else {\n        this.props.classifyDeleteClass(classValue);\n        this.setState({ classValue: '' });\n      }\n      this.toggleSaveMode();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.initialData) {\n      this.setState({ ...this.props.initialData });\n    }\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={event => {\n          event.preventDefault();\n          this.onSubmit();\n        }}\n        className=\"my-2\"\n      >\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder={`Enter class name${\n              this.props.isOptionalField ? ' (optional)' : ''\n            }`}\n            autoComplete=\"off\"\n            onChange={event =>\n              this.setState({ classValue: event.target.value })\n            }\n            value={this.state.classValue}\n            readOnly={this.state.isSaved}\n            pattern=\"[a-zA-Z0-9 ]+\"\n            title=\"Only alphabets, numbers and spaces are allowed\"\n            required\n          />\n          <div className=\"input-group-append\">\n            {this.state.isSaved ? (\n              <button className=\"btn btn-danger\">\n                <MdDelete />\n              </button>\n            ) : (\n              <button className=\"btn btn-outline-success\">\n                <FaCheck />\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ classification: { dataset } }) => {\n  return { classList: _.keys(dataset) };\n};\n\nexport default connect(mapStateToProps, {\n  classifyAddClass,\n  classifyDeleteClass,\n})(ClassificationClassListForm);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport ClassificationClassListForm from './ClassificationClassListForm';\n\nclass ClassificationClassList extends React.Component {\n  renderClassList() {\n    return _.map(_.range(0, this.props.numClassesLimit.max), number => {\n      let isOptionalField =\n        number >= this.props.numClassesLimit.min ? true : false;\n      let initialData = null;\n      if (number < this.props.classList.length) {\n        initialData = {\n          classValue: this.props.classList[number],\n          isSaved: true,\n        };\n      }\n      return (\n        <ClassificationClassListForm\n          form=\"classForm\"\n          isOptionalField={isOptionalField}\n          key={number}\n          initialData={initialData}\n        />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <h4>Classes</h4>\n        <small>\n          Number of classes must be within the{' '}\n          <mark>\n            <b>\n              range {this.props.numClassesLimit.min} -{' '}\n              {this.props.numClassesLimit.max}\n            </b>\n          </mark>\n        </small>\n        {this.renderClassList()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  classification: {\n    dataset,\n    configOptions: { numClassesLimit },\n  },\n}) => {\n  return { classList: _.keys(dataset), numClassesLimit };\n};\n\nexport default connect(mapStateToProps)(ClassificationClassList);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { renderFormField } from '../../../utils';\n\nclass ClassificationClassChoiceForm extends React.Component {\n  render() {\n    const { classList } = this.props;\n    return (\n      <form>\n        <div className=\"row mt-3\">\n          <div className=\"col-8 mx-auto\">\n            <Field\n              name=\"classChoice\"\n              component={renderFormField}\n              contentType=\"dropdown\"\n              options={{\n                default: 'Choose a class...',\n                ..._.zipObject(classList, classList),\n              }}\n            />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ classification: { dataset } }) => {\n  return { classList: _.keys(dataset) };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: 'classificationClassChoiceForm',\n    enableReinitialize: true,\n    onChange: (values, dispatch, props) => {\n      props.submit();\n    },\n  })(ClassificationClassChoiceForm)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { renderFormField } from '../../../utils';\n\nclass ClassificationDataUploadForm extends React.Component {\n  render() {\n    return (\n      <>\n        {this.props.currentClass &&\n        !this.props.numImagesExceeded &&\n        !this.props.sizeExceeded ? (\n          <form>\n            <div className=\"row mt-3\">\n              <div className=\"col-5 mx-auto\">\n                <ImUpload3 size={30} className=\"mb-3\" />\n                <Field\n                  name=\"classImages\"\n                  component={renderFormField}\n                  contentType=\"file\"\n                  label=\"Choose File\"\n                  acceptFileFormat=\"image/jpeg,image/png\"\n                  multiple\n                />\n              </div>\n            </div>\n          </form>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  classification: {\n    currentClass,\n    dataset,\n    datasetSize,\n    configOptions: {\n      numImagesLimit: { max: numImagesLimitMax },\n      sizeLimit,\n    },\n  },\n}) => {\n  return {\n    currentClass,\n    numImagesExceeded: dataset[currentClass]\n      ? dataset[currentClass].length >= numImagesLimitMax\n      : false,\n    sizeExceeded: datasetSize[currentClass]\n      ? datasetSize[currentClass] >= sizeLimit\n      : false,\n  };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: 'classificationDataUploadForm',\n    onChange: (values, dispatch, props) => {\n      props.submit();\n    },\n  })(ClassificationDataUploadForm)\n);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nclass ClassificationDataPreview extends React.Component {\n  renderCard(imgUrl, imgId) {\n    return (\n      <div className=\"col mb-3\" key={imgId}>\n        <div\n          className=\"card card-hover shadow bg-white rounded\"\n          style={{ width: '5rem' }}\n        >\n          <img src={imgUrl} className=\"card-img-top\" alt={`data-${imgId}`} />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.imgList ? (\n          <div className=\"row row-cols-1 row-cols-md-3 row-cols-lg-4 row-cols-xl-6 mt-5 mx-auto\">\n            {_.map(this.props.imgList, (image, imgId) =>\n              this.renderCard(image, imgId)\n            )}\n          </div>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  classification: { currentClass, datasetPreview },\n}) => {\n  return { imgList: datasetPreview[currentClass] };\n};\n\nexport default connect(mapStateToProps)(ClassificationDataPreview);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { classifyCurrentClass, classifyAddImages } from '../../../actions';\nimport { convertFileToBase64, removeFileBase64Header } from '../../../utils';\nimport ClassificationClassChoiceForm from './ClassificationClassChoiceForm';\nimport ClassificationDataUploadForm from './ClassificationDataUploadForm';\nimport ClassificationDataPreview from './ClassificationDataPreview';\n\nclass ClassificationDataset extends React.Component {\n  onClassChoiceSubmit = values => {\n    this.props.classifyCurrentClass(_.values(values)[0]);\n  };\n\n  fileListToArray = fileList => {\n    let imagesList = Array.from(fileList);\n    if (\n      this.props.currentClassImgCount + imagesList.length >\n      this.props.numImagesLimit.max\n    ) {\n      imagesList = imagesList.slice(\n        0,\n        this.props.numImagesLimit.max - this.props.currentClassImgCount\n      );\n    }\n    return imagesList;\n  };\n\n  getImageListSize = imagesList => {\n    let imagesListSize = 0;\n    if (imagesList.length > 0) {\n      imagesListSize = _.sumBy(['size'], _.partial(_.sumBy, imagesList));\n    }\n    return imagesListSize;\n  };\n\n  imageListToBase64 = async imagesList => {\n    let imagesListPreview = [];\n    for (let i = 0; i < imagesList.length; i++) {\n      imagesListPreview.push(await convertFileToBase64(imagesList[i]));\n    }\n    return imagesListPreview;\n  };\n\n  removeBase64HeaderFromImageList = imagesList => {\n    return _.map(imagesList, image => {\n      return removeFileBase64Header(image);\n    });\n  };\n\n  onDataUploadSubmit = async values => {\n    // Fetch list of images\n    let imagesList = this.fileListToArray(_.values(values)[0]);\n\n    // Obtain size\n    const imagesListSize = this.getImageListSize(imagesList);\n\n    if (this.props.currentSize + imagesListSize >= this.props.sizeLimit) {\n      toast.info(\n        <div>\n          <MdError size={25} />\n          &nbsp; Cannot upload images. Total size of the images for this class\n          are exceeding {this.props.sizeLimit / 1000000} MB.\n        </div>\n      );\n    } else if (imagesList.length > 0) {\n      // Get base64 string of each image\n      const imagesListPreview = await this.imageListToBase64(imagesList);\n\n      // Remove base64 header from image for backend support\n      imagesList = this.removeBase64HeaderFromImageList(imagesListPreview);\n\n      // Update redux store\n      this.props.classifyAddImages({\n        imagesList,\n        imagesListPreview,\n        imagesListSize,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <h4>Images</h4>\n        <small>\n          Number of images for each class must be within the{' '}\n          <mark>\n            <b>\n              range {this.props.numImagesLimit.min} -{' '}\n              {this.props.numImagesLimit.max}\n            </b>\n          </mark>\n          .\n        </small>\n        <br />\n        <small>\n          If you upload more than {this.props.numImagesLimit.max} images then\n          only the{' '}\n          <mark>\n            <b>first {this.props.numImagesLimit.max} images</b>\n          </mark>{' '}\n          will be considered.\n        </small>\n        <br />\n        <small>\n          The total size of the images for each class must be{' '}\n          <mark>\n            <b>less than {this.props.sizeLimit / 1000000} MB</b>\n          </mark>\n          .\n        </small>\n        <ClassificationClassChoiceForm\n          onSubmit={this.onClassChoiceSubmit}\n          initialValues={{ classChoice: this.props.currentClass }}\n        />\n        <ClassificationDataUploadForm onSubmit={this.onDataUploadSubmit} />\n        <ClassificationDataPreview />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  classification: {\n    currentClass,\n    dataset,\n    datasetSize,\n    configOptions: { numImagesLimit, sizeLimit },\n  },\n}) => {\n  return {\n    currentClass,\n    numImagesLimit,\n    sizeLimit,\n    currentSize: datasetSize[currentClass],\n    currentClassImgCount: dataset[currentClass]\n      ? dataset[currentClass].length\n      : 0,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  classifyCurrentClass,\n  classifyAddImages,\n})(ClassificationDataset);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ClassificationClassList from './ClassificationClassList';\nimport ClassificationDataset from './ClassificationDataset';\nimport '../../../styles/Modal.css';\n\nclass ClassificationModal extends React.Component {\n  renderContent() {\n    return (\n      <div className=\"row\">\n        <div className=\"col col-md-4 text-center\">\n          <ClassificationClassList />\n        </div>\n        <div className=\"col col-md-8 text-center\">\n          <ClassificationDataset />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={() => this.props.onDismiss()}>\n        <div\n          className=\"modal-body\"\n          style={{ width: '60%', maxHeight: 'calc(100vh - 20vh)' }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Dataset</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-success mr-2\"\n                onClick={() => {\n                  this.props.onDismiss();\n                }}\n              >\n                Save Dataset\n              </button>\n              <button\n                className=\"btn btn-warning mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Go Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nexport default ClassificationModal;\n","import _ from 'lodash';\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { submit } from 'redux-form';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { clearTrainData } from '../../../actions';\nimport { renderLoadingPage, renderSubmitButton } from '../../../utils';\nimport TrainingConfigForm from '../TrainingConfigForm';\nimport ClassificationModal from './ClassificationModal';\n\nclass ClassificationCreate extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  onModalDismiss = clear => {\n    if (clear) {\n      this.props.clearTrainData(this.props.taskName);\n    }\n    this.toggleModal();\n  };\n\n  checkNumClasses = () => {\n    const {\n      configOptions: {\n        numClassesLimit: { min: numClassesLimitMin },\n      },\n      dataset,\n    } = this.props;\n    if (_.keys(dataset).length < numClassesLimitMin) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; You need to create a minimum of {numClassesLimitMin} classes.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  checkNumImages = () => {\n    const {\n      configOptions: {\n        numImagesLimit: { min: numImagesLimitMin },\n      },\n      dataset,\n    } = this.props;\n\n    const datasetValues = _.values(dataset);\n    const datasetFailedClasses = _.sum(\n      _.map(datasetValues, items => (items.length < numImagesLimitMin ? 0 : 1))\n    );\n\n    if (datasetValues.length !== datasetFailedClasses) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; You need to upload atleast {numImagesLimitMin} images per\n          class.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  onConfigSubmit = values => {\n    if (this.checkNumClasses() && this.checkNumImages()) {\n      const {\n        dataset,\n        currentConfig: { modelType, dataSplit },\n      } = this.props;\n      this.props.onSubmit({\n        mode: 'training',\n        taskType: this.props.taskName,\n        ...values,\n        modelType,\n        dataSplit,\n        dataset,\n      });\n    }\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <ClassificationModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    if (_.isEmpty(this.props.configOptions)) {\n      return <>{renderLoadingPage('Loading')}</>;\n    }\n\n    return (\n      <>\n        <TrainingConfigForm\n          taskName={this.props.taskName}\n          form={this.props.formName}\n          onSubmit={this.onConfigSubmit}\n        />\n        <div className=\"row my-5 text-center\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-dark\"\n              onClick={event => {\n                event.preventDefault();\n                this.toggleModal();\n              }}\n              disabled={this.props.loadingForm.includes(this.props.formName)}\n            >\n              Create Dataset\n            </button>\n          </div>\n        </div>\n        <div className=\"row mt-5 text-center\">\n          <div className=\"col\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.formName),\n              btnColor: 'success',\n              originalText: 'Start Training!',\n              loadingText: 'Uploading config...',\n              onClick: () => this.props.dispatch(submit(this.props.formName)),\n            })}\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  loadingForm,\n  classification: { configOptions, currentConfig, dataset },\n}) => {\n  return { loadingForm, configOptions, currentConfig, dataset };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch,\n    ...bindActionCreators({ clearTrainData }, dispatch),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ClassificationCreate);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\n\nimport '../../styles/Modal.css';\n\nclass TrainingSubmitModal extends React.Component {\n  renderContent() {\n    return (\n      <div className=\"row my-4\">\n        <div className=\"col-12 mb-4\">\n          Your dataset and model configuration has been successfully uploaded to\n          the server for training.\n        </div>\n        <div className=\"col-12\">\n          <h5>\n            <b>Token:</b>&nbsp;&nbsp;&nbsp; {this.props.token}\n          </h5>\n        </div>\n        <div className=\"col-12 mt-4\">\n          Please copy and save the token provided above. It will be required for\n          testing the model on the inference page.\n        </div>\n        <div className=\"col-12 mt-4\">\n          Note:\n          <ul>\n            <li>\n              The model shall be trained and available for inference in 5-10\n              minutes depending upon the size of your dataset.\n            </li>\n            <li>\n              Trained models are available for testing only upto one hour\n              starting from the point when they are made available for\n              inference.\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\">\n        <div\n          className=\"modal-body\"\n          style={{ width: '40%', maxHeight: 'calc(100vh - 20vh)' }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Successful</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-success mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Dismiss\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps)(TrainingSubmitModal);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  clearTrainToken,\n  setTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n  clearTrainConfig,\n} from '../../../actions';\nimport history from '../../../history';\nimport ClassificationCreate from './ClassificationCreate';\nimport TrainingSubmitModal from '../TrainingSubmitModal';\n\nclass Classification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'classification';\n    this.formName = `${this.taskName}ConfigForm`;\n\n    this.configOptions = {\n      modelTypes: ['MobileNet v2', 'ResNet34'],\n      modelFieldTitle: 'Model',\n      numClassesLimit: { min: 2, max: 10 },\n      numImagesLimit: { min: 10, max: 100 },\n      sizeLimit: 10000000, // In bytes (10 MB)\n    };\n\n    this.currentConfig = {\n      modelType: 'MobileNet v2',\n      dataSplit: '70 : 30',\n      optimizer: 'sgd',\n      learningRate: 0.01,\n      ...this.props.currentTrainConfig,\n    };\n  }\n\n  onSubmit = values => {\n    // Send values to server\n    this.props.submitTrainRequest({\n      formName: this.formName,\n      trainConfig: values,\n    });\n  };\n\n  onModalDismiss = () => {\n    this.props.clearTrainData(this.taskName);\n    this.props.clearTrainToken();\n    history.push('/inference');\n  };\n\n  componentDidMount() {\n    this.props.setTrainConfig({\n      taskName: this.taskName,\n      config: {\n        ...this.props.trainConfigOptions,\n        ...this.configOptions,\n        currentConfig: this.currentConfig,\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearTrainConfig(this.taskName);\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.props.token ? (\n          <TrainingSubmitModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"card mx-auto mt-4\" style={{ width: '22rem' }}>\n          <img\n            src={`${process.env.PUBLIC_URL}/assets/imageClassification.gif`}\n            className=\"card-img-top\"\n            alt=\"source\"\n          />\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-6 mx-auto\">\n            <ClassificationCreate\n              taskName={this.taskName}\n              formName={this.formName}\n              onSubmit={this.onSubmit}\n            />\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, {\n  clearTrainToken,\n  setTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n  clearTrainConfig,\n})(Classification);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field } from 'redux-form';\n\nimport { setFormFileFieldLabel } from '../actions';\n\nclass FormFileField extends React.Component {\n  render() {\n    return (\n      <Field\n        {..._.omit(this.props.fieldConfig, 'label', 'hideFilename')}\n        label={\n          this.props.fieldLabel\n            ? this.props.fieldLabel\n            : this.props.fieldConfig.label\n        }\n        onChange={event => {\n          if (!this.props.hideFilename) {\n            this.props.setFormFileFieldLabel({\n              taskName: this.props.taskName,\n              label: event.target.files[0].name,\n            });\n          }\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ formFileField }, ownProps) => {\n  return { fieldLabel: formFileField[ownProps.taskName] };\n};\n\nexport default connect(mapStateToProps, { setFormFileFieldLabel })(\n  FormFileField\n);\n","import React from 'react';\nimport { reduxForm } from 'redux-form';\nimport { ImUpload3 } from 'react-icons/im';\n\nimport { renderFormField } from '../../../utils';\nimport FormFileField from '../../FormFileField';\n\nclass SADataUploadForm extends React.Component {\n  render() {\n    return (\n      <div className=\"row text-center\">\n        <div className=\"col-12 mb-4\">\n          <h4>Upload Dataset</h4>\n        </div>\n        <div className=\"col col-md-8 mx-auto\">\n          <form>\n            <ImUpload3 size={30} className=\"mb-3\" />\n            <FormFileField\n              taskName={this.props.taskName}\n              fieldConfig={{\n                name: 'saCsvData',\n                component: renderFormField,\n                contentType: 'file',\n                label: 'Choose File',\n                acceptFileFormat: '.csv, text/csv',\n              }}\n            />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default reduxForm({\n  form: 'saDataUploadForm',\n  onChange: (values, dispatch, props) => {\n    props.submit();\n  },\n})(SADataUploadForm);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { saAddData } from '../../../actions';\nimport { convertFileToBase64, removeFileBase64Header } from '../../../utils';\nimport SADataUploadForm from './SADataUploadForm';\nimport '../../../styles/Modal.css';\n\nclass SAModal extends React.Component {\n  onDataUploadSubmit = async values => {\n    let csvData = values.saCsvData;\n    if (csvData.length > 0) {\n      csvData = csvData[0];\n      if (csvData.size > this.props.sizeLimit) {\n        toast.info(\n          <div>\n            <MdError size={25} />\n            &nbsp; Cannot upload the file. Total size of the dataset is\n            exceeding {this.props.sizeLimit / 1000000} MB.\n          </div>\n        );\n      } else {\n        csvData = removeFileBase64Header(await convertFileToBase64(csvData));\n        this.props.saAddData(csvData);\n      }\n    }\n  };\n\n  renderContent() {\n    return (\n      <div className=\"row px-3\">\n        <div className=\"col text-justify\">\n          <p>\n            Upload the dataset as a <b>CSV (Comma-Separated Values)</b> file\n            with <b>two columns</b>:{' '}\n            <mark>\n              <b>input</b>\n            </mark>{' '}\n            and\n            <mark>\n              <b>label</b>\n            </mark>\n          </p>\n          Column Description:\n          <ul>\n            <li>\n              <mark>\n                <b>input</b>\n              </mark>\n              : Contains input sentences\n            </li>\n            <li>\n              <mark>\n                <b>label</b>\n              </mark>\n              : Contains the label (sentiment) for the corresponding input\n              sentences.\n            </li>\n          </ul>\n          <p>\n            NOTE: The CSV file must contain{' '}\n            <b>less than {this.props.numRows} rows</b> and its size must be{' '}\n            <b>less than {this.props.sizeLimit / 1000000} MB</b>\n          </p>\n          <br />\n          <div className=\"row\">\n            <div className=\"col col-md-6\">\n              <h4 className=\"mb-3 text-center\">Example Dataset Preview</h4>\n              <div\n                className=\"card shadow bg-white rounded mx-auto\"\n                style={{ width: '25rem' }}\n              >\n                <img\n                  src={`${process.env.PUBLIC_URL}/assets/saDataPreview.png`}\n                  className=\"card-img-top\"\n                  alt=\"sentiment analysis example dataset preview\"\n                />\n              </div>\n            </div>\n            <div className=\"col col-md-6\">\n              <SADataUploadForm\n                onSubmit={this.onDataUploadSubmit}\n                taskName={this.props.taskName}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      <div className=\"modal-container\" onClick={() => this.props.onDismiss()}>\n        <div\n          className=\"modal-body\"\n          style={{ width: '50%', maxHeight: 'calc(100vh - 20vh)' }}\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-center\">Upload Dataset</h3>\n          <hr className=\"w-100\" />\n          {this.renderContent()}\n          <hr className=\"w-100\" />\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              <button\n                className=\"btn btn-success mr-2\"\n                onClick={() => {\n                  this.props.onDismiss();\n                }}\n              >\n                Save Dataset\n              </button>\n              <button\n                className=\"btn btn-warning mr-2\"\n                onClick={() => this.props.onDismiss(true)}\n              >\n                Go Back\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>,\n      document.querySelector('#modal') // places the modal inside the container with id 'modal' in index.html\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  sentimentAnalysis: {\n    configOptions: { sizeLimit, numRows },\n  },\n}) => {\n  return {\n    sizeLimit,\n    numRows,\n  };\n};\n\nexport default connect(mapStateToProps, { saAddData })(SAModal);\n","import _ from 'lodash';\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { submit } from 'redux-form';\nimport { toast } from 'react-toastify';\nimport { MdError } from 'react-icons/md';\n\nimport { clearTrainData } from '../../../actions';\nimport { renderLoadingPage, renderSubmitButton } from '../../../utils';\nimport TrainingConfigForm from '../TrainingConfigForm';\nimport SAModal from './SAModal';\n\nclass SACreate extends React.Component {\n  state = {\n    displayModal: false,\n  };\n\n  toggleModal = () => {\n    this.setState({ displayModal: !this.state.displayModal });\n  };\n\n  onModalDismiss = clear => {\n    if (clear) {\n      this.props.clearTrainData(this.props.taskName);\n    }\n    this.toggleModal();\n  };\n\n  checkDataset = () => {\n    if (!this.props.dataset) {\n      toast.dark(\n        <div>\n          <MdError size={25} color=\"yellow\" />\n          &nbsp; Please upload a dataset.\n        </div>\n      );\n      return false;\n    }\n    return true;\n  };\n\n  onConfigSubmit = values => {\n    if (this.checkDataset()) {\n      const {\n        dataset,\n        currentConfig: { modelType, dataSplit },\n      } = this.props;\n      this.props.onSubmit({\n        mode: 'training',\n        taskType: this.props.taskName,\n        ...values,\n        modelType,\n        dataSplit,\n        dataset,\n      });\n    }\n  };\n\n  renderModal() {\n    return (\n      <>\n        {this.state.displayModal ? (\n          <SAModal\n            onDismiss={this.onModalDismiss}\n            taskName={this.props.taskName}\n          />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    if (_.isEmpty(this.props.configOptions)) {\n      return <>{renderLoadingPage('Loading')}</>;\n    }\n\n    return (\n      <>\n        <TrainingConfigForm\n          taskName={this.props.taskName}\n          form={this.props.formName}\n          onSubmit={this.onConfigSubmit}\n        />\n        <div className=\"row my-5 text-center\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-dark\"\n              onClick={event => {\n                event.preventDefault();\n                this.toggleModal();\n              }}\n              disabled={this.props.loadingForm.includes(this.props.formName)}\n            >\n              Upload Dataset\n            </button>\n          </div>\n        </div>\n        <div className=\"row mt-5 text-center\">\n          <div className=\"col\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.formName),\n              btnColor: 'success',\n              originalText: 'Start Training!',\n              loadingText: 'Uploading config...',\n              onClick: () => this.props.dispatch(submit(this.props.formName)),\n            })}\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  loadingForm,\n  sentimentAnalysis: { configOptions, currentConfig, dataset },\n}) => {\n  return { loadingForm, configOptions, currentConfig, dataset };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch,\n    ...bindActionCreators({ clearTrainData }, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SACreate);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  clearTrainToken,\n  setTrainConfig,\n  clearTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n} from '../../../actions';\nimport history from '../../../history';\nimport SACreate from './SACreate';\nimport TrainingSubmitModal from '../TrainingSubmitModal';\n\nclass SentimentAnalysis extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'sentimentAnalysis';\n    this.formName = `${this.taskName}ConfigForm`;\n\n    this.configOptions = {\n      modelTypes: ['LSTM', 'GRU'],\n      modelFieldTitle: 'RNN Type',\n      numRows: 10000,\n      sizeLimit: 1000000, // In bytes (1 MB)\n    };\n\n    this.currentConfig = {\n      modelType: 'LSTM',\n      dataSplit: '70 : 30',\n      optimizer: 'adam',\n      learningRate: 0.001,\n      ...this.props.currentTrainConfig,\n    };\n  }\n\n  onSubmit = values => {\n    this.props.submitTrainRequest({\n      formName: this.formName,\n      trainConfig: values,\n    });\n  };\n\n  onModalDismiss = () => {\n    this.props.clearTrainData(this.taskName);\n    this.props.clearTrainToken();\n    history.push('/inference');\n  };\n\n  componentDidMount() {\n    this.props.setTrainConfig({\n      taskName: this.taskName,\n      config: {\n        ...this.props.trainConfigOptions,\n        ...this.configOptions,\n        currentConfig: this.currentConfig,\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearTrainConfig(this.taskName);\n  }\n\n  renderModal() {\n    return (\n      <>\n        {this.props.token ? (\n          <TrainingSubmitModal onDismiss={this.onModalDismiss} />\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"card mx-auto mt-4\" style={{ width: '24rem' }}>\n          <img\n            src={`${process.env.PUBLIC_URL}/assets/sentimentAnalysis.gif`}\n            className=\"card-img-top\"\n            alt=\"source\"\n          />\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-6 mx-auto\">\n            <SACreate\n              taskName={this.taskName}\n              formName={this.formName}\n              onSubmit={this.onSubmit}\n            />\n          </div>\n        </div>\n        {this.renderModal()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ serverConfig: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, {\n  clearTrainToken,\n  setTrainConfig,\n  clearTrainConfig,\n  submitTrainRequest,\n  clearTrainData,\n})(SentimentAnalysis);\n","import React from 'react';\n\nimport HoverButtons from '../HoverButtons';\nimport Classification from './imageClassification/Classification';\nimport SentimentAnalysis from './textClassification/SentimentAnalysis';\n\nclass Training extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.hoverButtons = [\n      { buttonValue: 'classification', buttonText: 'Image Classification' },\n      { buttonValue: 'sentiment', buttonText: 'Sentiment Analysis' },\n    ];\n\n    this.trainConfigOptions = {\n      dataSplit: ['70 : 30', '80 : 20'],\n      batchSizeLimit: { min: 1, max: 256 },\n      numEpochsLimit: { min: 1, max: 20 },\n      optimizers: { adam: 'Adam', sgd: 'SGD' },\n      learningRateLimit: { min: 1e-5, max: 2 },\n      reduceLrOnPlateauLimit: {\n        factor: { min: 0.01, max: 0.5 },\n        patience: { min: 1, max: 20 },\n        minLr: 1e-5,\n      },\n    };\n\n    this.currentTrainConfig = {\n      reduceLrOnPlateau: false,\n      reduceLrOnPlateauPatience: 5,\n      reduceLrOnPlateauFactor: 0.1,\n      reduceLrOnPlateauMinLr: 1e-5,\n    };\n\n    this.state = {\n      currentTask: 'classification',\n    };\n  }\n\n  changeCurrentTask = currentTask => {\n    if (!(this.state.currentTask === currentTask)) {\n      this.setState({ currentTask });\n    }\n  };\n\n  renderCurrentTask() {\n    if (this.state.currentTask === 'classification') {\n      return (\n        <Classification\n          trainConfigOptions={this.trainConfigOptions}\n          currentTrainConfig={this.currentTrainConfig}\n        />\n      );\n    } else {\n      return (\n        <SentimentAnalysis\n          trainConfigOptions={this.trainConfigOptions}\n          currentTrainConfig={this.currentTrainConfig}\n        />\n      );\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Train a Model</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col text-center\">\n            <HoverButtons\n              hoverButtons={this.hoverButtons}\n              currentButtonValue={this.state.currentTask}\n              changeCurrentButtonValue={this.changeCurrentTask}\n            />\n          </div>\n        </div>\n        {this.renderCurrentTask()}\n      </>\n    );\n  }\n}\n\nexport default Training;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reset, reduxForm } from 'redux-form';\nimport { MdDelete } from 'react-icons/md';\n\nimport { submitInferenceToken, clearInferenceConfig } from '../../actions';\nimport { renderFormField, renderSubmitButton } from '../../utils';\n\nclass TokenForm extends React.Component {\n  onSubmit = values => {\n    if (this.props.token) {\n      this.props.clearInferenceConfig();\n      this.props.dispatch(reset(this.props.form));\n    } else {\n      this.props.submitInferenceToken({\n        formName: this.props.form,\n        token: values.token,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"row mb-1 mt-3 py-5\">\n        <div className=\"col-10 col-md-6 mx-auto\">\n          {this.props.token ? (\n            <form\n              onSubmit={this.props.handleSubmit(this.onSubmit)}\n              className=\"mb-4\"\n            >\n              <Field\n                name=\"token\"\n                component={renderFormField}\n                contentType=\"text\"\n                label=\"Token\"\n                textAppend={<MdDelete />}\n                enableAppendSubmit\n                isFixed\n              />\n            </form>\n          ) : (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n              <Field\n                name=\"token\"\n                component={renderFormField}\n                contentType=\"text\"\n                placeholder=\"Enter Token\"\n              />\n              <div className=\"row mt-3\">\n                <div className=\"col text-right\">\n                  {renderSubmitButton({\n                    loading: this.props.loadingForm.includes(this.props.form),\n                    originalText: 'Validate Token',\n                    loadingText: 'Validating...',\n                  })}\n                </div>\n              </div>\n            </form>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.token) {\n    errors.token = 'You must enter a token';\n  } else if (!/^[a-zA-Z0-9- ]+$/i.test(formValues.token)) {\n    errors.token = 'Invalid token';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm, inference: { token } }) => {\n  return { loadingForm, token };\n};\n\nexport default connect(mapStateToProps, {\n  submitInferenceToken,\n  clearInferenceConfig,\n})(reduxForm({ form: 'tokenForm', validate })(TokenForm));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { submitInferenceData, clearInferencePrediction } from '../../actions';\nimport {\n  renderFormField,\n  renderSubmitButton,\n  convertFileToBase64,\n  removeFileBase64Header,\n} from '../../utils';\nimport FormFileField from '../FormFileField';\n\nclass InferenceForm extends React.Component {\n  onSubmit = async ({ inferenceInput }) => {\n    this.props.clearInferencePrediction();\n\n    // Get input type\n    let inputType = 'text';\n    if (typeof inferenceInput === 'object') {\n      inputType = 'image';\n      inferenceInput = await convertFileToBase64(inferenceInput[0]);\n    }\n\n    // If input is non-text, convert it to base64 string\n    this.props.submitInferenceData({\n      formName: this.props.form,\n      formInput: {\n        token: this.props.token,\n        input:\n          inputType === 'image'\n            ? removeFileBase64Header(inferenceInput)\n            : inferenceInput,\n      },\n    });\n\n    // Send input to props for display\n    this.props.onSubmit(inferenceInput);\n  };\n\n  render() {\n    const { contentType, label, acceptFileFormat } = this.props.field;\n    return (\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n        {contentType === 'file' ? (\n          <FormFileField\n            taskName={this.props.taskName}\n            fieldConfig={{\n              name: 'inferenceInput',\n              component: renderFormField,\n              contentType,\n              label,\n              acceptFileFormat,\n            }}\n          />\n        ) : (\n          <Field\n            name=\"inferenceInput\"\n            component={renderFormField}\n            contentType={contentType}\n            label={label}\n          />\n        )}\n        <div className=\"row mt-3\">\n          <div className=\"col mx-auto\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.form),\n              originalText: 'Predict',\n              loadingText: 'Predicting...',\n            })}\n          </div>\n          <div className=\"col-12\">\n            <small>\n              *The model might take more than 1 min to give predictions for the\n              first time.\n            </small>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.inferenceInput) {\n    errors.inferenceInput = 'This field cannot be empty';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm, inference: { token } }) => {\n  return { loadingForm, token };\n};\n\nexport default connect(mapStateToProps, {\n  submitInferenceData,\n  clearInferencePrediction,\n})(reduxForm({ form: 'inferenceForm', validate })(InferenceForm));\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport InferenceForm from './InferenceForm';\n\nclass TaskDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inferenceInput: null,\n    };\n\n    // Set field values for form\n    let fieldValues = {};\n    if (this.props.taskType === 'classification') {\n      fieldValues = {\n        contentType: 'file',\n        label: 'Upload Image',\n        acceptFileFormat: 'image/jpeg,image/png',\n      };\n    } else {\n      fieldValues = {\n        contentType: 'text',\n        label: 'Enter Text:',\n      };\n    }\n    this.fieldValues = fieldValues;\n  }\n\n  onSubmit = inferenceInput => {\n    if (this.props.taskType === 'classification') {\n      this.setState({ inferenceInput: inferenceInput });\n    } else {\n      this.setState({ inferenceInput });\n    }\n  };\n\n  renderAccuracy() {\n    return (\n      <div className=\"row my-5\">\n        <div className=\"col-12 col-md-2\" />\n        <div className=\"col-12 col-md-3 my-auto text-center\">\n          <div className=\"ml-auto\">\n            <h5>Accuracy</h5>\n            <h5>\n              {(\n                this.props.accuracy * (this.props.accuracy < 1 ? 100 : 1)\n              ).toFixed(2)}{' '}\n              %\n            </h5>\n          </div>\n        </div>\n        <div className=\"col-12 col-md-6 mt-5 mt-md-0\">\n          <h5 className=\"text-center mb-3\">Accuracy Change Plot</h5>\n          <div\n            className=\"card shadow bg-white rounded mx-auto\"\n            style={{ width: '28rem' }}\n          >\n            <img\n              src={`data:image/jpeg;base64,${this.props.accuracyPlot}`}\n              className=\"card-img-top\"\n              alt=\"sentiment analysis example dataset preview\"\n            />\n          </div>\n        </div>\n        <div className=\"col-12 col-md-1\" />\n      </div>\n    );\n  }\n\n  renderOutput() {\n    return (\n      <div className=\"row mt-5\">\n        <div className=\"col-12 col-lg-6 mt-4 ml-auto text-center\">\n          <h4 className=\"text-center\">Input</h4>\n          {this.props.taskType === 'classification' ? (\n            <div\n              className=\"card mx-auto mt-3 shadow bg-white rounded\"\n              style={{ width: '20rem' }}\n            >\n              <img\n                src={this.state.inferenceInput}\n                className=\"card-img-top\"\n                alt=\"source\"\n              />\n            </div>\n          ) : (\n            <div className=\"card mx-auto shadow p-3 bg-white rounded\">\n              <div className=\"card-body\">\n                <h5 className=\"card-text\">{this.state.inferenceInput}</h5>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"col-12 col-lg-6 mt-5 mt-md-4 mr-auto text-center\">\n          <h4 className=\"text-center\">Prediction</h4>\n          <div className=\"card mx-auto mt-3 shadow bg-white rounded\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{this.props.prediction}</h5>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"row mb-4\">\n          <div className=\"col-12\">\n            <h4 className=\"text-center\">\n              {this.props.taskType === 'classification'\n                ? 'Image Classification'\n                : 'Sentiment Analysis'}\n            </h4>\n          </div>\n        </div>\n        {this.renderAccuracy()}\n        <div className=\"row mb-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <InferenceForm\n              onSubmit={this.onSubmit}\n              taskName={this.props.taskName}\n              field={this.fieldValues}\n            />\n          </div>\n        </div>\n        {this.props.prediction ? this.renderOutput() : ''}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  inference: { taskType, prediction, accuracy, accuracyPlot },\n}) => {\n  return { taskType, prediction, accuracy, accuracyPlot };\n};\n\nexport default connect(mapStateToProps)(TaskDisplay);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { clearInference } from '../../actions';\nimport TokenForm from './TokenForm';\nimport TaskDisplay from './TaskDisplay';\n\nclass Inference extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskName = 'inference';\n  }\n\n  componentWillUnmount() {\n    this.props.clearInference(this.taskName);\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1 className=\"heading\">Test Your Model</h1>\n          <TokenForm />\n          {this.props.token ? <TaskDisplay taskName={this.taskName} /> : ''}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ inference: { token } }) => {\n  return { token };\n};\n\nexport default connect(mapStateToProps, { clearInference })(Inference);\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\n\nimport history from '../history';\nimport Home from './cover/Home';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\nimport Training from './train/Training';\nimport Inference from './infer/Inference';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"page-container\">\n        <div className=\"content-wrap\">\n          <ToastContainer\n            position=\"top-center\"\n            autoClose={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            style={{ width: '40%' }}\n          />\n          <Router history={history}>\n            <Navbar />\n            <div className=\"container\">\n              <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/training\" exact component={Training} />\n                <Route path=\"/inference\" exact component={Inference} />\n              </Switch>\n            </div>\n          </Router>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { LOADING_FORM, CLEAR_LOADING_FORM } from '../actions/types';\n\nconst loadingFormReducer = (state = [], action) => {\n  switch (action.type) {\n    case LOADING_FORM:\n      return [...state, action.payload];\n    case CLEAR_LOADING_FORM:\n      return state.filter(element => element !== action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default loadingFormReducer;\n","import _ from 'lodash';\nimport {\n  SET_FORM_FILE_FIELD_LABEL,\n  CLEAR_FORM_FILE_FIELD_LABEL,\n} from '../actions/types';\n\nconst INITIAL_STATE = {};\n\nconst formFileFieldReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SET_FORM_FILE_FIELD_LABEL:\n      return { ...state, [action.payload.taskName]: action.payload.label };\n    case CLEAR_FORM_FILE_FIELD_LABEL:\n      return _.omit(state, action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default formFileFieldReducer;\n","import _ from 'lodash';\nimport {\n  CLASSIFY_CONFIG,\n  CLASSIFY_MODEL_TYPE,\n  CLASSIFY_DATA_SPLIT,\n  CLASSIFY_ADD_CLASS,\n  CLASSIFY_DELETE_CLASS,\n  CLASSIFY_CURRENT_CLASS,\n  CLASSIFY_ADD_IMAGES,\n  CLASSIFY_DATA_CLEAR,\n  CLASSIFY_CLEAR,\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  configOptions: {},\n  currentClass: '',\n  currentConfig: { modelType: '', dataSplit: '' },\n  dataset: {},\n  datasetSize: {},\n  datasetPreview: {},\n};\n\nconst classificationReducer = (state = INITIAL_STATE, action) => {\n  let dataset, datasetSize, datasetPreview, currentConfig, currentClass;\n  switch (action.type) {\n    case CLASSIFY_CONFIG:\n      return {\n        ...state,\n        configOptions: _.omit(action.payload, 'currentConfig'),\n        currentConfig: action.payload.currentConfig,\n      };\n    case CLASSIFY_MODEL_TYPE:\n      currentConfig = { ...state.currentConfig, modelType: action.payload };\n      return { ...state, currentConfig };\n    case CLASSIFY_DATA_SPLIT:\n      currentConfig = { ...state.currentConfig, dataSplit: action.payload };\n      return { ...state, currentConfig };\n    case CLASSIFY_ADD_CLASS:\n      dataset = { ...state.dataset, [action.payload]: [] };\n      datasetSize = { ...state.datasetSize, [action.payload]: 0 };\n      datasetPreview = { ...state.datasetPreview, [action.payload]: [] };\n      return { ...state, dataset, datasetSize, datasetPreview };\n    case CLASSIFY_DELETE_CLASS:\n      dataset = _.omit(state.dataset, action.payload);\n      datasetSize = _.omit(state.datasetSize, action.payload);\n      datasetPreview = _.omit(state.datasetPreview, action.payload);\n      currentClass =\n        state.currentClass === action.payload\n          ? INITIAL_STATE.currentClass\n          : state.currentClass;\n      return { ...state, dataset, datasetSize, datasetPreview, currentClass };\n    case CLASSIFY_CURRENT_CLASS:\n      return { ...state, currentClass: action.payload };\n    case CLASSIFY_ADD_IMAGES:\n      dataset = {\n        ...state.dataset,\n        [state.currentClass]: [\n          ...state.dataset[state.currentClass],\n          ...action.payload.imagesList,\n        ],\n      };\n      datasetSize = {\n        ...state.datasetSize,\n        [state.currentClass]:\n          state.datasetSize[state.currentClass] + action.payload.imagesListSize,\n      };\n      datasetPreview = {\n        ...state.datasetPreview,\n        [state.currentClass]: [\n          ...state.datasetPreview[state.currentClass],\n          ...action.payload.imagesListPreview,\n        ],\n      };\n      return { ...state, dataset, datasetSize, datasetPreview };\n    case CLASSIFY_DATA_CLEAR:\n      return {\n        ...state,\n        ..._.omit(INITIAL_STATE, 'configOptions', 'currentConfig'),\n      };\n    case CLASSIFY_CLEAR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default classificationReducer;\n","import _ from 'lodash';\nimport {\n  SA_CONFIG,\n  SA_RNN_TYPE,\n  SA_DATA_SPLIT,\n  SA_DATA_ADD,\n  SA_DATA_CLEAR,\n  SA_CLEAR,\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  configOptions: {},\n  currentConfig: { modelType: '', dataSplit: '' },\n  dataset: null,\n};\n\nconst sentimentAnalysisReducer = (state = INITIAL_STATE, action) => {\n  let currentConfig;\n  switch (action.type) {\n    case SA_CONFIG:\n      return {\n        ...state,\n        configOptions: _.omit(action.payload, 'currentConfig'),\n        currentConfig: action.payload.currentConfig,\n      };\n    case SA_RNN_TYPE:\n      currentConfig = { ...state.currentConfig, modelType: action.payload };\n      return { ...state, currentConfig };\n    case SA_DATA_SPLIT:\n      currentConfig = { ...state.currentConfig, dataSplit: action.payload };\n      return { ...state, currentConfig };\n    case SA_DATA_ADD:\n      return {\n        ...state,\n        dataset: action.payload,\n      };\n    case SA_DATA_CLEAR:\n      return {\n        ...state,\n        ..._.omit(INITIAL_STATE, 'configOptions', 'currentConfig'),\n      };\n    case SA_CLEAR:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default sentimentAnalysisReducer;\n","import { TRAIN_TOKEN_SET, TRAIN_TOKEN_CLEAR } from '../actions/types';\n\nconst serverConfigReducer = (state = {}, action) => {\n  switch (action.type) {\n    case TRAIN_TOKEN_SET:\n      return { ...state, token: action.payload };\n    case TRAIN_TOKEN_CLEAR:\n      return { ...state, token: '' };\n    default:\n      return state;\n  }\n};\n\nexport default serverConfigReducer;\n","import _ from 'lodash';\n\nimport {\n  INFERENCE_CONFIG_SET,\n  INFERENCE_CONFIG_CLEAR,\n  INFERENCE_SUBMIT,\n  INFERENCE_PREDICTION_CLEAR,\n  INFERENCE_CLEAR,\n} from '../actions/types';\n\nconst inferenceReducer = (state = {}, action) => {\n  switch (action.type) {\n    case INFERENCE_CONFIG_SET:\n      return { ...state, ...action.payload };\n    case INFERENCE_CONFIG_CLEAR:\n      return _.omit(state, 'token', 'prediction', 'accuracy', 'accuracyPlot');\n    case INFERENCE_SUBMIT:\n      return { ...state, prediction: action.payload };\n    case INFERENCE_PREDICTION_CLEAR:\n      return _.omit(state, 'prediction');\n    case INFERENCE_CLEAR:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport default inferenceReducer;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport loadingFormReducer from './loadingFormReducer';\nimport formFileFieldReducer from './formFileFieldReducer';\nimport classificationReducer from './classificationReducer';\nimport sentimentAnalysisReducer from './sentimentAnalysisReducer';\nimport serverConfigReducer from './serverConfigReducer';\nimport inferenceReducer from './inferenceReducer';\n\nexport default combineReducers({\n  form: formReducer,\n  loadingForm: loadingFormReducer,\n  formFileField: formFileFieldReducer,\n  classification: classificationReducer,\n  sentimentAnalysis: sentimentAnalysisReducer,\n  serverConfig: serverConfigReducer,\n  inference: inferenceReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}